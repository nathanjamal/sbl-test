{"version":3,"sources":["components/Card/styles.ts","components/Card/Card.tsx","components/Gallery/styles.ts","components/Gallery/Gallery.tsx","services/galleryService.ts","components/Gallery/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ImgCont","styled","div","TimeLabel","time","Main","article","Card","data","href","url","target","rel","style","backgroundImage","image","runningTime","title","StateLabel","section","Gallery","map","item","i","getGalleryData","a","fetch","req","json","message","GalleryContainer","useState","loading","galleryData","setGalleryData","useEffect","request","updatedGalleryData","status","items","error","fetchData","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"yRAEaA,EAAUC,IAAOC,IAAV,kEAAGD,CAAH,oGAQPE,EAAYF,IAAOG,KAAV,oEAAGH,CAAH,mTAyBTI,EAAOJ,IAAOK,QAAV,+DAAGL,CAAH,8jBCpBFM,EAXF,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAF,OACX,kBAAC,EAAD,KACC,uBAAGC,KAAMD,EAAKE,IAAKC,OAAO,SAASC,IAAI,uBACrC,kBAAC,EAAD,CAAYC,MAAO,CAACC,gBAAgB,OAAD,OAASN,EAAKO,MAAd,OAClCP,EAAKQ,aAAe,kBAAC,EAAD,KAAeR,EAAKQ,YAApB,UAErB,4BAAKR,EAAKS,UCRFC,EAAajB,IAAOkB,QAAV,qEAAGlB,CAAH,MAIVI,EAAOJ,IAAOkB,QAAV,+DAAGlB,CAAH,qDCKFmB,EANC,SAAC,GAAD,IAAEZ,EAAF,EAAEA,KAAF,OACd,kBAAC,EAAD,KACGA,EAAKa,KAAI,SAACC,EAAmBC,GAApB,OAAkC,kBAAC,EAAD,CAAMf,KAAMc,SCH/CE,EAAc,uCAAG,4BAAAC,EAAA,+EAGVC,MALI,qDAEM,cAGtBC,EAHsB,yBAKrBA,EAAIC,QALiB,yDAQrB,CACN,QAAW,EACX,QAAW,KAAIC,UAVY,yDAAH,qDC+CZC,EA7CU,WAAO,IAAD,EACSC,mBACpC,CACEvB,KAAM,GACNwB,SAAS,IAJgB,mBACtBC,EADsB,KACTC,EADS,KAQ7BC,qBAAU,WACRD,EAAe,eAAID,EAAL,CAAkBD,SAAS,KAE1B,uCAAG,8BAAAP,EAAA,sEACMD,IADN,OACVY,EADU,OAEVC,EAFU,eAGXJ,EAHW,CAIdD,SAAS,IAGY,MAAnBI,EAAQE,QAAkBF,EAAQG,MACpCF,EAAmB7B,KAAO4B,EAAQG,OAElCF,EAAmB7B,KAAO,GAC1B6B,EAAmBG,MAAQJ,EAAQP,SAGrCK,EAAeG,GAdC,2CAAH,oDAiBfI,KACC,IA7B0B,IA+BtBjC,EAAiByB,EAAjBzB,KAGP,OAHwByB,EAAXD,QAIJ,kBAAC,EAAD,mBAGLC,EAAYO,MACP,kBAAC,EAAD,KAAgBP,EAAYO,OAG9B,kBAAC,EAAD,CAAShC,KAAMA,K,MCpCTkC,MARf,WACE,OACE,0BAAMC,UAAU,OACd,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAApB,GACLqB,QAAQrB,MAAMA,EAAMX,c","file":"static/js/main.ad9335d2.chunk.js","sourcesContent":["import styled from 'styled-components/macro';\n\nexport const ImgCont = styled.div`\n\tposition: relative;\n\twidth: 100%;\n\theight: 0;\n\tpadding-bottom: 56.49717514124294%;\n\tbackground-size: cover;\n`;\n\nexport const TimeLabel = styled.time`\n\tposition: absolute;\n\tleft: 0;\n\tbottom: 0;\n\tdisplay: inline-block;\n\tpadding: 5px 6px 5px 24px;\n\tbackground: #fff;\n\tfont-size: 16px;\n\tcolor: #1E212A;\n\n \t@media (min-width: 431px) {\n \t\tpadding: 2px 4px 2px 14px;\n    font-size: 12px;\n  }\n\n  @media (min-width: 650px) {\n \t\tpadding: 5px 6px 5px 24px;\n    font-size: 16px;\n  }\n\n  @media (min-width: 1900px) {\n    font-size: 0.84vw;\n  }\n`;\n\nexport const Main = styled.article`\n\tbox-sizing: border-box;\n\tflex: 0 0 98%;\n\tbackground: #2B2F3B;\n\tborder: solid 2px #464B5E;\n\ttext-align: left;\n\tfont-family: 'Roboto Condensed', sans-serif;\n\n\ta {\n\t\tdisplay: flex;\n    flex-direction: column;\n    text-decoration: none;\n\t}\n\n\th1 {\n\t\tmargin: 0;\n\t\tpadding: 6.78% 5.36% 11.58%;\n\t\tfont-size: 23px;\n\t\tcolor: #fff;\n\t\ttext-decoration: none;\n\t\tfont-weight: 400;\n\t\ttext-transform: uppercase;\n\t}\n\n\t@media (min-width: 431px) {\n    flex: 0 0 48%;\n\n    h1 {\n    \tfont-size: 18px;\n    }\n  }\n\n  @media (min-width: 650px) {\n    h1 {\n    \tfont-size: 23px;\n    }\n  }\n\n  @media (min-width: 1020px) {\n    flex: 0 0 31%;\n  }\n\n  @media (min-width: 1440px) {\n    flex: 0 0 23%;\n  }\n\n  @media (min-width: 1900px) {\n    flex: 0 0 18%;\n    h1 {\n    \tfont-size: 1.58vw;\n    }\n  }\n`;\n","import React from 'react';\nimport {CardProps} from './interface';\nimport * as SC from './styles';\n\nconst Card = ({data}: CardProps) => (\n  <SC.Main>\n  \t<a href={data.url} target=\"_blank\" rel=\"noopener noreferrer\">\n\t    <SC.ImgCont style={{backgroundImage: `url(${data.image})`}}>\n\t    {data.runningTime && <SC.TimeLabel>{data.runningTime} MINS</SC.TimeLabel>}\n\t    </SC.ImgCont>\n\t    <h1>{data.title}</h1>\n    </a>\n  </SC.Main>\n);\n\nexport default Card;\n","import styled from 'styled-components/macro';\n\nexport const StateLabel = styled.section`\n\t\n`;\n\nexport const Main = styled.section`\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\n\tarticle {\n\t\tmargin: 1%;\n\t}\n`;\n","import React from 'react';\nimport Card from '../Card/Card';\nimport {GalleryProps, GalleryItem} from './interface';\nimport * as SC from './styles';\n\nconst Gallery = ({data}: GalleryProps) => (\n  <SC.Main>\n    {data.map((item: GalleryItem, i: number) => <Card data={item} />)}\n  </SC.Main>\n);\n\nexport default Gallery;\n","import {GalleryRequestResponse} from '../components/Gallery/interface';\n\nconst GALLERY_API_URL = 'https://api.jsonbin.io/b/5e95bd3c5fa47104cea035df';\n\nexport const getGalleryData = async (): Promise<GalleryRequestResponse> => {\n\n\ttry {\n\t\tconst req = await fetch(GALLERY_API_URL);\n\n\t\treturn req.json();\n\t} catch(err) {\n\t\t\n\t\treturn {\n\t\t\t'status': -1,\n\t\t\t'message': err.message\n\t\t};\n\t}\n};\n","import React, {useState, useEffect} from 'react';\nimport Gallery from './Gallery';\nimport {getGalleryData} from '../../services/galleryService';\nimport {GalleryData} from './interface';\nimport * as SC from './styles';\n\nconst GalleryContainer = () => {\n  const [galleryData, setGalleryData] = useState<GalleryData>(\n    {\n      data: [],\n      loading: false,\n    }\n  );\n\n  useEffect(() => {\n    setGalleryData({...galleryData, loading: true});\n\n    const fetchData = async () => {\n      const request = await getGalleryData();\n      const updatedGalleryData: GalleryData = {\n        ...galleryData,\n        loading: false\n      };\n\n      if (request.status === 200 && request.items) {\n        updatedGalleryData.data = request.items;\n      } else {\n        updatedGalleryData.data = [];\n        updatedGalleryData.error = request.message;\n      }\n\n      setGalleryData(updatedGalleryData);\n    };\n\n    fetchData();\n  }, []);\n\n  const {data, loading} = galleryData;\n\n  \n  if (loading) {\n    return <SC.StateLabel>Loading...</SC.StateLabel>;\n  }\n\n  if (galleryData.error) {\n    return <SC.StateLabel>{galleryData.error}</SC.StateLabel>;\n  }\n\n  return <Gallery data={data} />;\n};\n\nexport default GalleryContainer;\n","import React from 'react';\nimport Gallery from './components/Gallery';\nimport './App.css';\n\nfunction App() {\n  return (\n    <main className=\"App\">\n      <Gallery />\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}